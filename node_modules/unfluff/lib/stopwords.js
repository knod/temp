// Generated by CoffeeScript 2.0.0-beta7
void function () {
  var _, cache, candiateWords, fs, getFilePath, path, removePunctuation, stopwords;
  path = require('path');
  // fs = require('fs');
  _ = require('lodash');
  cache = {};

  // // Glob experiment
  // require('../data/stopwords/*.js', {mode: 'expand'});

  // For more flexibility, look into webpack or, for browserify, bulkify or require-globify
  // require-globify had issues with things needing to be required in
  // main.js while they need to by dynamically invoked in here
  var languages = {
    ar: require('../data/stopwords/stopwords-ar.js'),
    bg: require('../data/stopwords/stopwords-bg.js'),
    cs: require('../data/stopwords/stopwords-cs.js'),
    da: require('../data/stopwords/stopwords-da.js'),
    de: require('../data/stopwords/stopwords-de.js'),
    en: require('../data/stopwords/stopwords-en.js'),
    es: require('../data/stopwords/stopwords-es.js'),
    fi: require('../data/stopwords/stopwords-fi.js'),
    fr: require('../data/stopwords/stopwords-fr.js'),
    hu: require('../data/stopwords/stopwords-hu.js'),
    id: require('../data/stopwords/stopwords-id.js'),
    it: require('../data/stopwords/stopwords-it.js'),
    ko: require('../data/stopwords/stopwords-ko.js'),
    nb: require('../data/stopwords/stopwords-nb.js'),
    no: require('../data/stopwords/stopwords-no.js'),
    pl: require('../data/stopwords/stopwords-pl.js'),
    pt: require('../data/stopwords/stopwords-pt.js'),
    ru: require('../data/stopwords/stopwords-ru.js'),
    sv: require('../data/stopwords/stopwords-sv.js'),
    th: require('../data/stopwords/stopwords-th.js'),
    tr: require('../data/stopwords/stopwords-tr.js'),
    zh: require('../data/stopwords/stopwords-zh.js')
  };

  // getFilePath = function (language) {
  //   // You have to change this to the right reference depending on where your bundle.js is
  //   // var wholePath = path.join(__dirname, '..', 'data', 'stopwords', 'stopwords-' + language + '.txt');
  //   // var wholePath = path.join(__dirname, '..', 'data', 'stopwords', 'stopwords-' + language + '.js');
  //   var wholePath = path.join( '..', 'data', 'stopwords', 'stopwords-' + language + '.js' );
  //   // var wholePath = path.join( 'node_modules', 'unfluff', 'data', 'stopwords', 'stopwords-' + language + '.js' )
  //   // wholePath = '.' + wholePath;
  //   console.log('path:', wholePath)
  //   return wholePath;
  // };
  module.exports = stopwords = function (content, language) {
    if ( !language ) { language = "en" }

    var count, filePath, overlappingStopwords, stopWords, strippedInput, words;
    if (null == language)
      language = 'en';

    // filePath = getFilePath(language);

    // Get the stopwords using require, since they're JSON
    stopWords = null;
    try {
      // stopWords = require( filePath );
      stopWords = languages[ language ];
    } catch (err) {
      stopWords = null;
    }

    if ( !stopWords ) {
    // if (!fs.existsSync(filePath)) {
      console.error("WARNING: No stopwords file found for '" + language + "' - defaulting to English!");
      // filePath  = getFilePath('en');
      // stopWords = require( filePath );
      stopWords = languages[ 'en' ];
    }

    // Would language + '_stopwords' as property name be more clear?
    if (cache.hasOwnProperty(language)) {
      stopWords = cache[language];
    } else {
      // stopWords = fs.readFileSync(filePath).toString().split('\n').filter(function (s) {
      //   return s.length > 0;
      // });
      cache[language] = stopWords;
    }
    strippedInput = removePunctuation(content);
    words = candiateWords(strippedInput);
    overlappingStopwords = [];
    count = 0;
    _.each(words, function (w) {
      count += 1;
      if (stopWords.indexOf(w.toLowerCase()) > -1)
        return overlappingStopwords.push(w.toLowerCase());
    });
    return {
      wordCount: count,
      stopwordCount: overlappingStopwords.length,
      stopWords: overlappingStopwords
    };
  };
  removePunctuation = function (content) {
    return content.replace(/[\|\@\<\>\[\]\"\'\.,-\/#\?!$%\^&\*\+;:{}=\-_`~()]/g, '');
  };
  candiateWords = function (strippedInput) {
    return strippedInput.split(' ');
  };
}.call(this);
